{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from \"react\";\nimport styles from \"@/styles/fares.module.css\";\nimport { useRouter } from \"next/router\";\nimport Layout from \"@/components/layout\";\nimport FareCard from \"@/components/common/fareCard\";\nimport { countries } from \"utils/data\"; // firebase\n\nimport { collection, query, where, getDocs, limit, startAfter } from \"firebase/firestore\";\nimport { db } from \"@/config/firebaseConfig\";\nimport { convertString } from \"utils/helpers\";\nimport SyncAltIcon from \"@mui/icons-material/SyncAlt\";\nimport { Typography, Skeleton, ThemeProvider } from \"@mui/material\";\nimport InquiryForm from \"@/components/common/inquiryForm\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport { theme } from \"@/styles/theme\";\nexport default function Fares() {\n  const router = useRouter();\n  const {\n    dest,\n    dept,\n    airline: airlineCode\n  } = router.query;\n  const {\n    0: fares,\n    1: setFares\n  } = useState([]);\n  const {\n    0: footerData,\n    1: setFooterData\n  } = useState(null);\n  const {\n    0: airline,\n    1: setAirline\n  } = useState(null);\n  const {\n    0: isEmpty,\n    1: setIsEmpty\n  } = useState(false);\n  const {\n    0: skip,\n    1: setSkip\n  } = useState(0);\n  let {\n    0: lastDocu,\n    1: setLastDocu\n  } = useState();\n  const {\n    0: fetching,\n    1: setFetching\n  } = useState();\n  const {\n    0: blockApi,\n    1: setBlockApi\n  } = useState(false);\n\n  const getData = async () => {\n    if (!blockApi) {\n      setFetching(true);\n\n      if (fares.length == 0) {\n        if (airlineCode != \"all\") {\n          if (dest != \"all\" && dept != \"all\") {\n            const arrOfData = [];\n            const q = query(collection(db, \"fares\"), where(\"deptAirport.airportCode\", \"==\", dept), where(\"destAirport.airportCode\", \"==\", dest), where(\"airline.airlineCode\", \"==\", airlineCode), limit(10));\n            const querySnapshot = await getDocs(q);\n            setLastDocu(querySnapshot.docs[querySnapshot.docs.length - 1]);\n            querySnapshot.forEach(doc => {\n              // doc.data() is never undefined for query doc snapshots\n              arrOfData.push(_objectSpread(_objectSpread({}, doc.data()), {}, {\n                _id: doc.id\n              }));\n            });\n            setFares(arrOfData);\n\n            if (arrOfData.length === 0) {\n              setIsEmpty(true);\n            }\n\n            if (arrOfData.length < 10) {\n              setBlockApi(true);\n            }\n\n            setFetching(false);\n            return;\n          } else if (dept != \"all\") {\n            const arrOfData = [];\n            const q = query(collection(db, \"fares\"), where(\"deptAirport.airportCode\", \"==\", dept), where(\"airline.airlineCode\", \"==\", airlineCode), limit(10));\n            const querySnapshot = await getDocs(q);\n            setLastDocu(querySnapshot.docs[querySnapshot.docs.length - 1]);\n            querySnapshot.forEach(doc => {\n              // doc.data() is never undefined for query doc snapshots\n              arrOfData.push(_objectSpread(_objectSpread({}, doc.data()), {}, {\n                _id: doc.id\n              }));\n            });\n            setFares(arrOfData);\n\n            if (arrOfData.length === 0) {\n              setIsEmpty(true);\n            }\n\n            if (arrOfData.length < 10) {\n              setBlockApi(true);\n            }\n\n            setFetching(false);\n            return;\n          } else if (dest != \"all\") {\n            const arrOfData = [];\n            const q = query(collection(db, \"fares\"), where(\"destAirport.airportCode\", \"==\", dest), where(\"airline.airlineCode\", \"==\", airlineCode), limit(10));\n            const querySnapshot = await getDocs(q);\n            setLastDocu(querySnapshot.docs[querySnapshot.docs.length - 1]);\n            querySnapshot.forEach(doc => {\n              // doc.data() is never undefined for query doc snapshots\n              arrOfData.push(_objectSpread(_objectSpread({}, doc.data()), {}, {\n                _id: doc.id\n              }));\n            });\n            setFares(arrOfData);\n\n            if (arrOfData.length === 0) {\n              setIsEmpty(true);\n            }\n\n            if (arrOfData.length < 10) {\n              setBlockApi(true);\n            }\n\n            setFetching(false);\n            return;\n          }\n        } else if (airlineCode == \"all\") {\n          if (dest != \"all\" && dept != \"all\") {\n            const arrOfData = [];\n            const q = query(collection(db, \"fares\"), where(\"deptAirport.airportCode\", \"==\", dept), where(\"destAirport.airportCode\", \"==\", dest), limit(10));\n            const querySnapshot = await getDocs(q);\n            setLastDocu(querySnapshot.docs[querySnapshot.docs.length - 1]);\n            querySnapshot.forEach(doc => {\n              // doc.data() is never undefined for query doc snapshots\n              arrOfData.push(_objectSpread(_objectSpread({}, doc.data()), {}, {\n                _id: doc.id\n              }));\n            });\n            setFares(arrOfData);\n\n            if (arrOfData.length === 0) {\n              setIsEmpty(true);\n            }\n\n            if (arrOfData.length < 10) {\n              setBlockApi(true);\n            }\n\n            setFetching(false);\n            return;\n          } else if (dept != \"all\") {\n            const arrOfData = [];\n            const q = query(collection(db, \"fares\"), where(\"deptAirport.airportCode\", \"==\", dept), limit(10));\n            const querySnapshot = await getDocs(q);\n            setLastDocu(querySnapshot.docs[querySnapshot.docs.length - 1]);\n            querySnapshot.forEach(doc => {\n              // doc.data() is never undefined for query doc snapshots\n              arrOfData.push(_objectSpread(_objectSpread({}, doc.data()), {}, {\n                _id: doc.id\n              }));\n            });\n            setFares(arrOfData);\n\n            if (arrOfData.length === 0) {\n              setIsEmpty(true);\n            }\n\n            if (arrOfData.length < 10) {\n              setBlockApi(true);\n            }\n\n            setFetching(false);\n            return;\n          } else if (dest != \"all\") {\n            const arrOfData = [];\n            const q = query(collection(db, \"fares\"), where(\"destAirport.airportCode\", \"==\", dest), limit(10));\n            const querySnapshot = await getDocs(q);\n            setLastDocu(querySnapshot.docs[querySnapshot.docs.length - 1]);\n            querySnapshot.forEach(doc => {\n              // doc.data() is never undefined for query doc snapshots\n              arrOfData.push(_objectSpread(_objectSpread({}, doc.data()), {}, {\n                _id: doc.id\n              }));\n            });\n            setFares(arrOfData);\n\n            if (arrOfData.length === 0) {\n              setIsEmpty(true);\n            }\n\n            if (arrOfData.length < 10) {\n              setBlockApi(true);\n            }\n\n            setFetching(false);\n            return;\n          }\n        }\n      } else if (fares.length > 0) {\n        if (dest != \"all\" && dept != \"all\") {\n          const arrOfData = [];\n          const q = query(collection(db, \"fares\"), where(\"deptAirport.airportCode\", \"==\", dept), where(\"destAirport.airportCode\", \"==\", dest), startAfter(lastDocu), limit(10));\n          const querySnapshot = await getDocs(q);\n          setLastDocu(querySnapshot.docs[querySnapshot.docs.length - 1]);\n          querySnapshot.forEach(doc => {\n            // doc.data() is never undefined for query doc snapshots\n            arrOfData.push(_objectSpread(_objectSpread({}, doc.data()), {}, {\n              _id: doc.id\n            }));\n          });\n          setFares([...fares, ...arrOfData]);\n\n          if (arrOfData.length === 0) {\n            setIsEmpty(true);\n          }\n\n          if (arrOfData.length < 10) {\n            setBlockApi(true);\n          }\n\n          setFetching(false);\n          return;\n        } else if (dept != \"all\") {\n          const arrOfData = [];\n          const q = query(collection(db, \"fares\"), where(\"deptAirport.airportCode\", \"==\", dept), startAfter(lastDocu), limit(10));\n          const querySnapshot = await getDocs(q);\n          setLastDocu(querySnapshot.docs[querySnapshot.docs.length - 1]);\n          querySnapshot.forEach(doc => {\n            // doc.data() is never undefined for query doc snapshots\n            arrOfData.push(_objectSpread(_objectSpread({}, doc.data()), {}, {\n              _id: doc.id\n            }));\n          });\n          setFares([...fares, ...arrOfData]);\n\n          if (arrOfData.length === 0) {\n            setIsEmpty(true);\n          }\n\n          if (arrOfData.length < 10) {\n            setBlockApi(true);\n          }\n\n          setFetching(false);\n          return;\n        } else if (dest != \"all\") {\n          const arrOfData = [];\n          const q = query(collection(db, \"fares\"), where(\"destAirport.airportCode\", \"==\", dest), startAfter(lastDocu), limit(10));\n          const querySnapshot = await getDocs(q);\n          setLastDocu(querySnapshot.docs[querySnapshot.docs.length - 1]);\n          querySnapshot.forEach(doc => {\n            arrOfData.push(_objectSpread(_objectSpread({}, doc.data()), {}, {\n              _id: doc.id\n            }));\n          });\n          setFares([...fares, ...arrOfData]);\n\n          if (arrOfData.length === 0) {\n            setIsEmpty(true);\n          }\n\n          if (arrOfData.length < 10) {\n            setBlockApi(true);\n          }\n\n          setFetching(false);\n          return;\n        }\n      }\n    }\n  };\n\n  const getFooterData = async () => {\n    const index = Math.floor(Math.random() * 13) + 1;\n    const arrOfData = [];\n\n    if (index) {\n      const q = query(collection(db, \"airlinesFooter\"), where(\"index\", \"==\", index.toString()));\n      const querySnapshot = await getDocs(q);\n      querySnapshot.forEach(doc => {\n        arrOfData.push(_objectSpread(_objectSpread({}, doc.data()), {}, {\n          _id: doc.id\n        }));\n      });\n      setFooterData(arrOfData[0]);\n    }\n  };\n\n  const getAirline = async () => {\n    const index = Math.floor(Math.random() * 33) + 1;\n    const arrOfData = [];\n\n    if (index) {\n      const q = query(collection(db, \"airlines\"), where(\"index\", \"==\", index.toString()));\n      const querySnapshot = await getDocs(q);\n      querySnapshot.forEach(doc => {\n        arrOfData.push(_objectSpread(_objectSpread({}, doc.data()), {}, {\n          _id: doc.id\n        }));\n      });\n      setAirline(arrOfData[0]);\n    }\n  };\n\n  useEffect(() => {\n    if (dept && dest) {\n      getData();\n      getFooterData();\n      getAirline(); // console.lxog(dept, dest);\n    }\n  }, [dest, dept]);\n  useEffect(() => {\n    if (dept && dest) {\n      getData();\n    }\n  }, [skip]);\n  return /*#__PURE__*/_jsx(Layout, {\n    title: \"Destinations\",\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.faresPage,\n      children: [fares.length > 0 && /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.banner,\n        children: [dept != \"all\" && dest == \"all\" && /*#__PURE__*/_jsx(\"h1\", {\n          style: {\n            marginRight: \"5px\"\n          },\n          children: \"From\"\n        }), /*#__PURE__*/_jsxs(\"h1\", {\n          children: [dept != \"all\" ? /*#__PURE__*/_jsx(_Fragment, {\n            children: convertString(fares[0].deptAirport.city)\n          }) : /*#__PURE__*/_jsx(_Fragment, {\n            children: \"To\"\n          }), dept != \"all\" && dest != \"all\" ? /*#__PURE__*/_jsx(\"span\", {\n            className: styles.banner__icon,\n            children: /*#__PURE__*/_jsx(SyncAltIcon, {})\n          }) : /*#__PURE__*/_jsx(_Fragment, {\n            children: \" \"\n          }), dest != \"all\" && /*#__PURE__*/_jsx(_Fragment, {\n            children: convertString(fares[0].destAirport.city)\n          })]\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: !isEmpty ? styles.faresContainer : styles.displayNone,\n        children: fares.length > 0 ? /*#__PURE__*/_jsx(_Fragment, {\n          children: fares.map((fare, i) => /*#__PURE__*/_jsx(FareCard, {\n            data: fare\n          }, i))\n        }) : /*#__PURE__*/_jsx(_Fragment, {\n          children: Array(6).fill(true).map((item, i) => /*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: styles.fareSkeletonForPC,\n              children: /*#__PURE__*/_jsx(Skeleton, {\n                variant: \"rectangular\",\n                width: 560,\n                height: 215\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: styles.fareSkeletonForPhone,\n              children: /*#__PURE__*/_jsx(Skeleton, {\n                variant: \"rectangular\",\n                width: 280,\n                height: 480\n              })\n            })]\n          }, i))\n        })\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: theme,\n        children: fares.length > 0 && /*#__PURE__*/_jsx(LoadingButton, {\n          sx: {\n            margin: \"1rem\"\n          },\n          loading: fetching,\n          disabled: blockApi,\n          onClick: () => setSkip(skip + 1),\n          variant: \"contained\",\n          children: blockApi ? \"No More\" : \"More\"\n        })\n      }), /*#__PURE__*/_jsx(_Fragment, {\n        children: isEmpty && /*#__PURE__*/_jsx(InquiryForm, {\n          h1: \"Send Inquiry\"\n        })\n      }), footerData && /*#__PURE__*/_jsx(\"div\", {\n        className: styles.airlineFooterContainer,\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.airlineFooter,\n          children: [/*#__PURE__*/_jsx(\"h2\", {\n            children: footerData.mainTxt\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: styles.airlineFooter__cards,\n            children: footerData.cards.map((item, i) => /*#__PURE__*/_jsxs(\"div\", {\n              className: styles.airlineFooter__card,\n              children: [/*#__PURE__*/_jsx(\"div\", {\n                className: styles.card__img,\n                children: /*#__PURE__*/_jsx(\"img\", {\n                  src: item.img,\n                  alt: \"airlineFooter card img\"\n                })\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                className: styles.card__txt,\n                children: [/*#__PURE__*/_jsx(\"h4\", {\n                  children: item.heading\n                }), /*#__PURE__*/_jsx(\"p\", {\n                  children: item.txt\n                })]\n              })]\n            }, i))\n          })]\n        })\n      }), airline && /*#__PURE__*/_jsx(\"div\", {\n        className: styles.footerBanner,\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: styles.bannerImg,\n          children: /*#__PURE__*/_jsx(\"img\", {\n            src: airline.banner,\n            alt: `${airline.name} image`\n          })\n        })\n      })]\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}