{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport Router from 'next/router';\nimport styles from '@/styles/components/searchbar.module.css';\nimport { data } from '../../utils/searchJson';\nimport { useRouter } from 'next/router';\nimport { TextField, Button, ThemeProvider, Typography, Select, MenuItem, FormControl, InputLabel, Autocomplete, Skeleton, Dialog, IconButton, DialogTitle, DialogContent, DialogContentText, DialogActions, Tabs, Stack } from '@mui/material';\nimport { convertString } from '../../utils/helpers';\nimport MuiPhoneNumber from 'material-ui-phone-number';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport Close from '@mui/icons-material/Close';\nimport emailjs from '@emailjs/browser';\nimport Box from '@mui/material/Box';\nimport Tab from '@mui/material/Tab';\nimport { airlines } from '../../utils/data';\nconst ITEM_HEIGHT = 40;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 80\n    }\n  }\n};\nexport default function Searchbar() {\n  const router = useRouter();\n  const {\n    0: type,\n    1: setType\n  } = useState('business');\n  const {\n    0: selectedDept,\n    1: setSelectedDept\n  } = useState(' ');\n  const {\n    0: selectedDest,\n    1: setSelectedDest\n  } = useState(' ');\n  const {\n    0: route,\n    1: setRoute\n  } = useState();\n  const {\n    0: deptdate,\n    1: setDeptDate\n  } = useState();\n  const {\n    0: arriveDate,\n    1: setArriveDate\n  } = useState();\n  const {\n    0: open,\n    1: setOpen\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: showDialog,\n    1: setShowDialog\n  } = useState(false);\n  const {\n    0: airline,\n    1: setAirline\n  } = useState('all');\n  const [value, setValue] = React.useState(0);\n\n  const handleChange1 = (event, newValue) => {\n    setValue(newValue);\n  }; // console.log(\"selectedDept\", selectedDept);\n  // console.log(\"selectedDest\", selectedDest);\n\n\n  const {\n    0: details,\n    1: setDetails\n  } = useState({\n    name: '',\n    email: '',\n    phone: ''\n  });\n  const {\n    0: form,\n    1: setForm\n  } = useState({\n    name: '',\n    email: '',\n    phone: '',\n    returnDate: '',\n    deptDate: '',\n    budget: '',\n    dept: '',\n    dest: '',\n    msg: '',\n    adult: 1\n  });\n\n  const handleChange = (type, value) => {\n    if (type == 'dep') {\n      setSelectedDept(value);\n    } else if (type == 'dest') {\n      setSelectedDest(value);\n    } else if (type == 'phone') {\n      setDetails(_objectSpread(_objectSpread({}, details), {}, {\n        phone: value\n      }));\n    }\n  };\n\n  const handleChangeType = event => {\n    setType(event.target.value);\n  };\n\n  function generateLink(dept, dest, airline) {\n    var _airline$split$, _airline$split$2;\n\n    let deptCode = '';\n    let destCode = '';\n    const airlineCode = (_airline$split$ = airline.split(\"-\")[1]) !== null && _airline$split$ !== void 0 && _airline$split$.trim() ? (_airline$split$2 = airline.split(\"-\")[1]) === null || _airline$split$2 === void 0 ? void 0 : _airline$split$2.trim() : \"all\";\n\n    if (dept.length > 3 && dest.length > 3) {\n      const _dept = dept.split('-')[1].trim().split('');\n\n      deptCode = [_dept[1], _dept[2], _dept[3]].join('');\n\n      const _dest = dest.split('-')[1].trim().split('');\n\n      destCode = [_dest[1], _dest[2], _dest[3]].join('');\n      setRoute(`/fares?dept=${deptCode}&dest=${destCode}&airline=${airlineCode}`);\n      return;\n    } else if (dept.length > 3) {\n      const _dept = dept.split('-')[1].trim().split('');\n\n      deptCode = [_dept[1], _dept[2], _dept[3]].join('');\n      setRoute(`/fares?dept=${deptCode}&dest=all&airline=${airlineCode}`);\n    } else if (dest.length > 3) {\n      const _dest = dest.split('-')[1].trim().split('');\n\n      destCode = [_dest[1], _dest[2], _dest[3]].join('');\n      setRoute(`/fares?dept=all&dest=${destCode}&airline=${airlineCode}`);\n    } // console.log(deptCode);\n    // console.log(destCode);\n\n  }\n\n  const {\n    0: enquiryLocation,\n    1: setEnquiryLocation\n  } = useState();\n  const {\n    airlineSlug\n  } = router.query;\n  const pathName = router.pathname;\n  let pathname = pathName;\n  useEffect(() => {\n    if (airlineSlug) {\n      setEnquiryLocation(airlineSlug);\n    } else {\n      if (pathname === '/') {\n        pathname = '/home';\n      }\n\n      setEnquiryLocation(pathname);\n    }\n  }, [airlineSlug, pathName]); // const handleSearch = () => {\n  //   if (arriveDate && deptdate && selectedDept && selectedDest) {\n  //     setOpen(true);\n  //   } else {\n  //     setShowDialog({\n  //       title: 'Error',\n  //       msg: 'Kindly fill the Form.',\n  //     });\n  //   }\n  // };\n\n  function validateEmail(email) {\n    if (email.length > 0) {\n      if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(email)) {\n        return true;\n      }\n\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  const handleSearch = () => {\n    setLoading(true);\n\n    if (arriveDate && deptdate && selectedDept.length > 1 && selectedDest.length > 1 && details.email && validateEmail(details.email) && details.phone.length === 15 && details.name.length > 0) {\n      emailjs.send('service_iodawml', 'template_mqvxf7a', {\n        name: details.name,\n        email: details.email,\n        phone: details.phone,\n        returnDate: arriveDate,\n        deptDate: deptdate,\n        dept: selectedDept,\n        dest: selectedDest,\n        inquiryLocation: enquiryLocation,\n        siteName: 'FastHolidays'\n      }, 'tL_Vpyj5WxQRqs6ec').then(res => {\n        setShowDialog({\n          title: 'Successfull',\n          msg: 'Inquiry sent successfully, We will call you for further processing.'\n        });\n        setForm({\n          name: '',\n          email: '',\n          phone: '',\n          returnDate: '',\n          deptDate: '',\n          dept: '',\n          dest: '',\n          msg: '',\n          adult: ''\n        });\n        Router.push(route);\n      }).catch(err => {\n        // setShowDialog({\n        //   title: 'Something went wrong',\n        //   msg: 'Inquiry not sent.',\n        // });\n        setDetails({\n          name: '',\n          email: '',\n          phone: ''\n        });\n        Router.push(route);\n        setOpen(false);\n      });\n    } else {\n      setShowDialog({\n        title: 'Error',\n        msg: 'Kindly Enter Appropriate Data.'\n      });\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    generateLink(selectedDept, selectedDest, airline);\n  }, [selectedDest, selectedDept, airline]);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.bannerContainer,\n    children: [/*#__PURE__*/_jsx(Box, {\n      sx: {\n        borderBottom: 1,\n        borderColor: 'divider'\n      },\n      children: /*#__PURE__*/_jsxs(Tabs, {\n        value: value,\n        onChange: handleChange1,\n        \"aria-label\": \"basic tabs example\",\n        children: [/*#__PURE__*/_jsx(Tab, _objectSpread({\n          label: \"Flights\"\n        }, a11yProps(0))), /*#__PURE__*/_jsx(\"div\", {\n          className: styles.searchformbtn,\n          children: /*#__PURE__*/_jsx(Link, {\n            href: \"/holidays\",\n            children: \"Hotels + Flights\"\n          })\n        })]\n      })\n    }), /*#__PURE__*/_jsx(TabPanel, {\n      value: value,\n      index: 0,\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.banner__form,\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: styles.flexVerical,\n          children: [/*#__PURE__*/_jsx(Autocomplete, {\n            fullWidth: true,\n            sx: {\n              width: '280px'\n            },\n            size: \"small\",\n            id: \"free-solo-2-demo\",\n            disableClearable: true,\n            autoHighlight: true // onFocusCapture={() => getData()}\n            ,\n            renderOption: (props, option) => /*#__PURE__*/_jsx(Typography, _objectSpread(_objectSpread({\n              component: \"li\",\n              sx: {\n                fontSize: '12px'\n              }\n            }, props), {}, {\n              children: option\n            })),\n            options: data ? data.filter(item => item.country === \"united-kingdom\").map((deptt, i) => `${convertString(deptt.city)} - (${deptt.airportCode})\n                          - ${convertString(deptt.airport)} - \n                          ${convertString(deptt.country)}`) : [''],\n            onChange: (event, value) => {\n              setSelectedDept(value);\n            },\n            renderInput: params => /*#__PURE__*/_jsx(TextField, _objectSpread(_objectSpread({\n              fullWidth: true\n            }, params), {}, {\n              label: \"Departure\",\n              InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n                type: 'search'\n              })\n            }))\n          }), /*#__PURE__*/_jsx(Autocomplete, {\n            fullWidth: true // freeSolo\n            ,\n            sx: {\n              width: '280px'\n            },\n            size: \"small\",\n            id: \"free-solo-2-demo\",\n            autoHighlight: true,\n            disableClearable: true // onFocusCapture={() => getData()}\n            ,\n            renderOption: (props, option) => /*#__PURE__*/_jsx(Typography, _objectSpread(_objectSpread({\n              component: \"li\",\n              sx: {\n                fontSize: '12px'\n              }\n            }, props), {}, {\n              children: option\n            })),\n            options: data ? data.map((destt, i) => `${convertString(destt.city)} - (${destt.airportCode}) - ${convertString(destt.airport)} - ${convertString(destt.country)}`) : [''],\n            onChange: (event, value) => {\n              setSelectedDest(value);\n            },\n            renderInput: params => /*#__PURE__*/_jsx(TextField, _objectSpread(_objectSpread({\n              fullWidth: true\n            }, params), {}, {\n              label: \"Destination\",\n              InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n                type: 'search'\n              })\n            }))\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: styles.airlineSearch,\n            children: /*#__PURE__*/_jsx(Autocomplete, {\n              fullWidth: true // freeSolo\n              ,\n              sx: {\n                width: '280px'\n              },\n              size: \"small\",\n              id: \"free-solo-2-demo\",\n              autoHighlight: true,\n              disableClearable: true // onFocusCapture={() => getData()}\n              ,\n              renderOption: (props, option) => /*#__PURE__*/_jsx(Typography, _objectSpread(_objectSpread({\n                component: \"li\",\n                sx: {\n                  fontSize: '12px'\n                }\n              }, props), {}, {\n                children: option\n              })),\n              options: airlines ? airlines.map((airline, i) => `${convertString(airline.name)} - ${airline.airlineCode}`) : [''],\n              onChange: (event, value) => {\n                setAirline(value);\n              },\n              renderInput: params => /*#__PURE__*/_jsx(TextField, _objectSpread(_objectSpread({\n                fullWidth: true\n              }, params), {}, {\n                label: \"Airline\",\n                InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n                  type: 'search'\n                })\n              }))\n            })\n          })]\n        }), /*#__PURE__*/_jsxs(Stack, {\n          direction: \"column\",\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxs(Stack, {\n            className: styles.flexVercal,\n            direction: \"row\",\n            spacing: 2,\n            children: [/*#__PURE__*/_jsx(TextField, {\n              size: \"small\",\n              label: \"Departure Date\",\n              type: \"date\",\n              sx: {\n                width: '132px'\n              },\n              onChange: e => setDeptDate(e.target.value),\n              InputLabelProps: {\n                shrink: true\n              }\n            }), /*#__PURE__*/_jsx(TextField, {\n              sx: {\n                width: '132px'\n              },\n              size: \"small\",\n              onChange: e => setArriveDate(e.target.value),\n              label: \"Return Date\",\n              type: \"date\",\n              InputLabelProps: {\n                shrink: true\n              }\n            })]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.counts,\n            children: [/*#__PURE__*/_jsx(TextField, {\n              onChange: e => handleChange('infants', e.target.value),\n              type: \"number\",\n              label: \"Infants\",\n              size: \"small\",\n              sx: {\n                width: '80px'\n              }\n            }), /*#__PURE__*/_jsx(TextField, {\n              onChange: e => handleChange('childs', e.target.value),\n              type: \"number\",\n              label: \"Childs\",\n              size: \"small\",\n              sx: {\n                width: '80px'\n              }\n            }), /*#__PURE__*/_jsx(TextField, {\n              onChange: e => setForm(_objectSpread(_objectSpread({}, form), {}, {\n                adult: e.target.value\n              })),\n              type: \"number\",\n              label: \"Adults\",\n              size: \"small\",\n              value: form.adult,\n              sx: {\n                width: '80px'\n              }\n            })]\n          })]\n        }), /*#__PURE__*/_jsxs(Stack, {\n          direction: \"column\",\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxs(Stack, {\n            direction: \"row\",\n            spacing: 2,\n            children: [/*#__PURE__*/_jsx(TextField, {\n              size: \"small\",\n              label: \"Name\",\n              sx: {\n                width: '132px'\n              },\n              onChange: e => setDetails(_objectSpread(_objectSpread({}, details), {}, {\n                name: e.target.value\n              }))\n            }), /*#__PURE__*/_jsx(TextField, {\n              size: \"small\",\n              label: \"Email\",\n              sx: {\n                width: '132px'\n              },\n              onChange: e => setDetails(_objectSpread(_objectSpread({}, details), {}, {\n                email: e.target.value\n              }))\n            })]\n          }), /*#__PURE__*/_jsx(MuiPhoneNumber, {\n            value: form.phone,\n            size: \"small\",\n            defaultCountry: 'gb',\n            onChange: value => handleChange('phone', value),\n            variant: \"outlined\",\n            label: \"Phone Number\"\n          })]\n        }), /*#__PURE__*/_jsx(LoadingButton, {\n          loading: loading,\n          onClick: () => handleSearch(),\n          variant: \"contained\",\n          sx: {\n            height: 'fit-content'\n          },\n          disableElevation: true,\n          children: \"Inquire Us\"\n        })]\n      })\n    }), /*#__PURE__*/_jsx(TabPanel, {\n      value: value,\n      index: 1,\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.banner__form,\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: styles.flexVerical,\n          children: [/*#__PURE__*/_jsx(Autocomplete, {\n            fullWidth: true,\n            sx: {\n              width: '280px'\n            },\n            size: \"small\",\n            id: \"free-solo-2-demo\",\n            disableClearable: true,\n            autoHighlight: true // onFocusCapture={() => getData()}\n            ,\n            renderOption: (props, option) => /*#__PURE__*/_jsx(Typography, _objectSpread(_objectSpread({\n              component: \"li\",\n              sx: {\n                fontSize: '12px'\n              }\n            }, props), {}, {\n              children: option\n            })),\n            options: data ? data.filter(item => item.country === \"united-kingdom\").map((deptt, i) => `${convertString(deptt.city)} - (${deptt.airportCode})\n                          - ${convertString(deptt.airport)} - \n                          ${convertString(deptt.country)}`) : [''],\n            onChange: (event, value) => {\n              setSelectedDept(value);\n            },\n            renderInput: params => /*#__PURE__*/_jsx(TextField, _objectSpread(_objectSpread({\n              fullWidth: true\n            }, params), {}, {\n              label: \"Departure\",\n              InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n                type: 'search'\n              })\n            }))\n          }), /*#__PURE__*/_jsx(Autocomplete, {\n            fullWidth: true // freeSolo\n            ,\n            sx: {\n              width: '280px'\n            },\n            size: \"small\",\n            id: \"free-solo-2-demo\",\n            autoHighlight: true,\n            disableClearable: true // onFocusCapture={() => getData()}\n            ,\n            renderOption: (props, option) => /*#__PURE__*/_jsx(Typography, _objectSpread(_objectSpread({\n              component: \"li\",\n              sx: {\n                fontSize: '12px'\n              }\n            }, props), {}, {\n              children: option\n            })),\n            options: data ? data.map((destt, i) => `${convertString(destt.city)} - (${destt.airportCode}) - ${convertString(destt.airport)} - ${convertString(destt.country)}`) : [''],\n            onChange: (event, value) => {\n              setSelectedDest(value);\n            },\n            renderInput: params => /*#__PURE__*/_jsx(TextField, _objectSpread(_objectSpread({\n              fullWidth: true\n            }, params), {}, {\n              label: \"Destination\",\n              InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n                type: 'search'\n              })\n            }))\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: styles.airlineSearch,\n            children: /*#__PURE__*/_jsx(Autocomplete, {\n              fullWidth: true // freeSolo\n              ,\n              sx: {\n                width: '280px'\n              },\n              size: \"small\",\n              id: \"free-solo-2-demo\",\n              autoHighlight: true,\n              disableClearable: true // onFocusCapture={() => getData()}\n              ,\n              renderOption: (props, option) => /*#__PURE__*/_jsx(Typography, _objectSpread(_objectSpread({\n                component: \"li\",\n                sx: {\n                  fontSize: '12px'\n                }\n              }, props), {}, {\n                children: option\n              })),\n              options: airlines ? airlines.map((airline, i) => `${convertString(airline.name)} - ${airline.airlineCode}`) : [''],\n              onChange: (event, value) => {\n                setAirline(value);\n              },\n              renderInput: params => /*#__PURE__*/_jsx(TextField, _objectSpread(_objectSpread({\n                fullWidth: true\n              }, params), {}, {\n                label: \"Airline\",\n                InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n                  type: 'search'\n                })\n              }))\n            })\n          })]\n        }), /*#__PURE__*/_jsxs(Stack, {\n          direction: \"column\",\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxs(Stack, {\n            className: styles.flexVercal,\n            direction: \"row\",\n            spacing: 2,\n            children: [/*#__PURE__*/_jsx(TextField, {\n              size: \"small\",\n              label: \"Departure Date\",\n              type: \"date\",\n              sx: {\n                width: '132px'\n              },\n              onChange: e => setDeptDate(e.target.value),\n              InputLabelProps: {\n                shrink: true\n              }\n            }), /*#__PURE__*/_jsx(TextField, {\n              sx: {\n                width: '132px'\n              },\n              size: \"small\",\n              onChange: e => setArriveDate(e.target.value),\n              label: \"Return Date\",\n              type: \"date\",\n              InputLabelProps: {\n                shrink: true\n              }\n            })]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.counts,\n            children: [/*#__PURE__*/_jsx(TextField, {\n              onChange: e => handleChange('infants', e.target.value),\n              type: \"number\",\n              label: \"Infants\",\n              size: \"small\",\n              sx: {\n                width: '80px'\n              }\n            }), /*#__PURE__*/_jsx(TextField, {\n              onChange: e => handleChange('childs', e.target.value),\n              type: \"number\",\n              label: \"Childs\",\n              size: \"small\",\n              sx: {\n                width: '80px'\n              }\n            }), /*#__PURE__*/_jsx(TextField, {\n              onChange: e => setForm(_objectSpread(_objectSpread({}, form), {}, {\n                adult: e.target.value\n              })),\n              type: \"number\",\n              label: \"Adults\",\n              size: \"small\",\n              value: form.adult,\n              sx: {\n                width: '80px'\n              }\n            })]\n          })]\n        }), /*#__PURE__*/_jsxs(Stack, {\n          direction: \"column\",\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxs(Stack, {\n            direction: \"row\",\n            spacing: 2,\n            children: [/*#__PURE__*/_jsx(TextField, {\n              size: \"small\",\n              label: \"Name\",\n              sx: {\n                width: '132px'\n              },\n              onChange: e => setDetails(_objectSpread(_objectSpread({}, details), {}, {\n                name: e.target.value\n              }))\n            }), /*#__PURE__*/_jsx(TextField, {\n              size: \"small\",\n              label: \"Email\",\n              sx: {\n                width: '132px'\n              },\n              onChange: e => setDetails(_objectSpread(_objectSpread({}, details), {}, {\n                email: e.target.value\n              }))\n            })]\n          }), /*#__PURE__*/_jsx(MuiPhoneNumber, {\n            value: form.phone,\n            size: \"small\",\n            defaultCountry: 'gb',\n            onChange: value => handleChange('phone', value),\n            variant: \"outlined\",\n            label: \"Phone Number\"\n          })]\n        }), /*#__PURE__*/_jsx(LoadingButton, {\n          loading: loading,\n          onClick: () => handleSearch(),\n          variant: \"contained\",\n          sx: {\n            height: 'fit-content'\n          },\n          disableElevation: true,\n          children: \"Inquire Us\"\n        })]\n      })\n    }), /*#__PURE__*/_jsx(TabPanel, {\n      value: value,\n      index: 2,\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.banner__form,\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: styles.flexVerical,\n          children: [/*#__PURE__*/_jsx(Autocomplete, {\n            fullWidth: true,\n            sx: {\n              width: '280px'\n            },\n            size: \"small\",\n            id: \"free-solo-2-demo\",\n            disableClearable: true,\n            autoHighlight: true // onFocusCapture={() => getData()}\n            ,\n            renderOption: (props, option) => /*#__PURE__*/_jsx(Typography, _objectSpread(_objectSpread({\n              component: \"li\",\n              sx: {\n                fontSize: '12px'\n              }\n            }, props), {}, {\n              children: option\n            })),\n            options: data ? data.filter(item => item.country === \"united-kingdom\").map((deptt, i) => `${convertString(deptt.city)} - (${deptt.airportCode})\n                          - ${convertString(deptt.airport)} - \n                          ${convertString(deptt.country)}`) : [''],\n            onChange: (event, value) => {\n              setSelectedDept(value);\n            },\n            renderInput: params => /*#__PURE__*/_jsx(TextField, _objectSpread(_objectSpread({\n              fullWidth: true\n            }, params), {}, {\n              label: \"Departure\",\n              InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n                type: 'search'\n              })\n            }))\n          }), /*#__PURE__*/_jsx(Autocomplete, {\n            fullWidth: true // freeSolo\n            ,\n            sx: {\n              width: '280px'\n            },\n            size: \"small\",\n            id: \"free-solo-2-demo\",\n            autoHighlight: true,\n            disableClearable: true // onFocusCapture={() => getData()}\n            ,\n            renderOption: (props, option) => /*#__PURE__*/_jsx(Typography, _objectSpread(_objectSpread({\n              component: \"li\",\n              sx: {\n                fontSize: '12px'\n              }\n            }, props), {}, {\n              children: option\n            })),\n            options: data ? data.map((destt, i) => `${convertString(destt.city)} - (${destt.airportCode}) - ${convertString(destt.airport)} - ${convertString(destt.country)}`) : [''],\n            onChange: (event, value) => {\n              setSelectedDest(value);\n            },\n            renderInput: params => /*#__PURE__*/_jsx(TextField, _objectSpread(_objectSpread({\n              fullWidth: true\n            }, params), {}, {\n              label: \"Destination\",\n              InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n                type: 'search'\n              })\n            }))\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: styles.airlineSearch,\n            children: /*#__PURE__*/_jsx(Autocomplete, {\n              fullWidth: true // freeSolo\n              ,\n              sx: {\n                width: '280px'\n              },\n              size: \"small\",\n              id: \"free-solo-2-demo\",\n              autoHighlight: true,\n              disableClearable: true // onFocusCapture={() => getData()}\n              ,\n              renderOption: (props, option) => /*#__PURE__*/_jsx(Typography, _objectSpread(_objectSpread({\n                component: \"li\",\n                sx: {\n                  fontSize: '12px'\n                }\n              }, props), {}, {\n                children: option\n              })),\n              options: airlines ? airlines.map((airline, i) => `${convertString(airline.name)} - ${airline.airlineCode}`) : [''],\n              onChange: (event, value) => {\n                setAirline(value);\n              },\n              renderInput: params => /*#__PURE__*/_jsx(TextField, _objectSpread(_objectSpread({\n                fullWidth: true\n              }, params), {}, {\n                label: \"Airline\",\n                InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n                  type: 'search'\n                })\n              }))\n            })\n          })]\n        }), /*#__PURE__*/_jsxs(Stack, {\n          direction: \"column\",\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxs(Stack, {\n            className: styles.flexVercal,\n            direction: \"row\",\n            spacing: 2,\n            children: [/*#__PURE__*/_jsx(TextField, {\n              size: \"small\",\n              label: \"Departure Date\",\n              type: \"date\",\n              sx: {\n                width: '132px'\n              },\n              onChange: e => setDeptDate(e.target.value),\n              InputLabelProps: {\n                shrink: true\n              }\n            }), /*#__PURE__*/_jsx(TextField, {\n              sx: {\n                width: '132px'\n              },\n              size: \"small\",\n              onChange: e => setArriveDate(e.target.value),\n              label: \"Return Date\",\n              type: \"date\",\n              InputLabelProps: {\n                shrink: true\n              }\n            })]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.counts,\n            children: [/*#__PURE__*/_jsx(TextField, {\n              onChange: e => handleChange('infants', e.target.value),\n              type: \"number\",\n              label: \"Infants\",\n              size: \"small\",\n              sx: {\n                width: '80px'\n              }\n            }), /*#__PURE__*/_jsx(TextField, {\n              onChange: e => handleChange('childs', e.target.value),\n              type: \"number\",\n              label: \"Childs\",\n              size: \"small\",\n              sx: {\n                width: '80px'\n              }\n            }), /*#__PURE__*/_jsx(TextField, {\n              onChange: e => setForm(_objectSpread(_objectSpread({}, form), {}, {\n                adult: e.target.value\n              })),\n              type: \"number\",\n              label: \"Adults\",\n              size: \"small\",\n              value: form.adult,\n              sx: {\n                width: '80px'\n              }\n            })]\n          })]\n        }), /*#__PURE__*/_jsxs(Stack, {\n          direction: \"column\",\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxs(Stack, {\n            direction: \"row\",\n            spacing: 2,\n            children: [/*#__PURE__*/_jsx(TextField, {\n              size: \"small\",\n              label: \"Name\",\n              sx: {\n                width: '132px'\n              },\n              onChange: e => setDetails(_objectSpread(_objectSpread({}, details), {}, {\n                name: e.target.value\n              }))\n            }), /*#__PURE__*/_jsx(TextField, {\n              size: \"small\",\n              label: \"Email\",\n              sx: {\n                width: '132px'\n              },\n              onChange: e => setDetails(_objectSpread(_objectSpread({}, details), {}, {\n                email: e.target.value\n              }))\n            })]\n          }), /*#__PURE__*/_jsx(MuiPhoneNumber, {\n            value: form.phone,\n            size: \"small\",\n            defaultCountry: 'gb',\n            onChange: value => handleChange('phone', value),\n            variant: \"outlined\",\n            label: \"Phone Number\"\n          })]\n        }), /*#__PURE__*/_jsx(LoadingButton, {\n          loading: loading,\n          onClick: () => handleSearch(),\n          variant: \"contained\",\n          sx: {\n            height: 'fit-content'\n          },\n          disableElevation: true,\n          children: \"Inquire Us\"\n        })]\n      })\n    }), /*#__PURE__*/_jsxs(Dialog, {\n      open: showDialog,\n      keepMounted: true,\n      onClose: () => showDialog(false),\n      children: [/*#__PURE__*/_jsx(DialogTitle, {\n        children: showDialog.title\n      }), /*#__PURE__*/_jsx(DialogContent, {\n        children: /*#__PURE__*/_jsx(DialogContentText, {\n          children: showDialog.msg\n        })\n      }), /*#__PURE__*/_jsx(DialogActions, {\n        children: /*#__PURE__*/_jsx(Button, {\n          onClick: () => setShowDialog(false),\n          children: \"OK\"\n        })\n      })]\n    })]\n  });\n}\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`\n  };\n}\n\nfunction TabPanel(props) {\n  const {\n    children,\n    value,\n    index\n  } = props,\n        other = _objectWithoutProperties(props, [\"children\", \"value\", \"index\"]);\n\n  return /*#__PURE__*/_jsx(\"div\", _objectSpread(_objectSpread({\n    role: \"tabpanel\",\n    hidden: value !== index,\n    id: `simple-tabpanel-${index}`,\n    \"aria-labelledby\": `simple-tab-${index}`\n  }, other), {}, {\n    children: value === index && /*#__PURE__*/_jsx(Box, {\n      sx: {\n        p: 3\n      },\n      children: /*#__PURE__*/_jsx(_Fragment, {\n        children: children\n      })\n    })\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}