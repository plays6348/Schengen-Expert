{"ast":null,"code":"export function convertString(str) {\n  if (str) {\n    var temp = str.split(\"-\"),\n        i,\n        pretty;\n\n    for (i = 0; i < temp.length; i++) {\n      temp[i] = temp[i].charAt(0).toUpperCase() + temp[i].slice(1);\n    }\n\n    pretty = temp.join(\" \");\n    return pretty;\n  }\n} // const salt = 'wertyuiop123456765467890dfghjkjhgcv';\n\nconst salt = 'lkjhgfdsazxcvbnm0987654321poiuytrew';\nexport function encrypt(text) {\n  const textToChars = text => text.split(\"\").map(c => c.charCodeAt(0));\n\n  const byteHex = n => (\"0\" + Number(n).toString(16)).substr(-2);\n\n  const applySaltToChar = code => textToChars(salt).reduce((a, b) => a ^ b, code);\n\n  return text.split(\"\").map(textToChars).map(applySaltToChar).map(byteHex).join(\"\");\n}\nexport function decrypt(encoded) {\n  const textToChars = text => text.split(\"\").map(c => c.charCodeAt(0));\n\n  const applySaltToChar = code => textToChars(salt).reduce((a, b) => a ^ b, code);\n\n  return encoded.match(/.{1,2}/g).map(hex => parseInt(hex, 16)).map(applySaltToChar).map(charCode => String.fromCharCode(charCode)).join(\"\");\n}\n\nfunction randomString(length) {\n  var result = \"\";\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  var charactersLength = characters.length;\n\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n\n  return result;\n}","map":{"version":3,"sources":["D:/Meta Melon Data/Schengen-Expert/utils/helpers.js"],"names":["convertString","str","temp","split","i","pretty","length","charAt","toUpperCase","slice","join","salt","encrypt","text","textToChars","map","c","charCodeAt","byteHex","n","Number","toString","substr","applySaltToChar","code","reduce","a","b","decrypt","encoded","match","hex","parseInt","charCode","String","fromCharCode","randomString","result","characters","charactersLength","Math","floor","random"],"mappings":"AAAA,OAAO,SAASA,aAAT,CAAuBC,GAAvB,EAA4B;AACjC,MAAGA,GAAH,EAAQ;AACN,QAAIC,IAAI,GAAGD,GAAG,CAACE,KAAJ,CAAU,GAAV,CAAX;AAAA,QACEC,CADF;AAAA,QAEEC,MAFF;;AAGA,SAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGF,IAAI,CAACI,MAArB,EAA6BF,CAAC,EAA9B,EAAkC;AAChCF,MAAAA,IAAI,CAACE,CAAD,CAAJ,GAAUF,IAAI,CAACE,CAAD,CAAJ,CAAQG,MAAR,CAAe,CAAf,EAAkBC,WAAlB,KAAkCN,IAAI,CAACE,CAAD,CAAJ,CAAQK,KAAR,CAAc,CAAd,CAA5C;AACD;;AACDJ,IAAAA,MAAM,GAAGH,IAAI,CAACQ,IAAL,CAAU,GAAV,CAAT;AACA,WAAOL,MAAP;AACD;AAEF,C,CAED;;AACA,MAAMM,IAAI,GAAG,qCAAb;AAEA,OAAO,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;AAC5B,QAAMC,WAAW,GAAID,IAAD,IAAUA,IAAI,CAACV,KAAL,CAAW,EAAX,EAAeY,GAAf,CAAoBC,CAAD,IAAOA,CAAC,CAACC,UAAF,CAAa,CAAb,CAA1B,CAA9B;;AACE,QAAMC,OAAO,GAAIC,CAAD,IAAO,CAAC,MAAMC,MAAM,CAACD,CAAD,CAAN,CAAUE,QAAV,CAAmB,EAAnB,CAAP,EAA+BC,MAA/B,CAAsC,CAAC,CAAvC,CAAvB;;AACA,QAAMC,eAAe,GAAIC,IAAD,IAAUV,WAAW,CAACH,IAAD,CAAX,CAAkBc,MAAlB,CAAyB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAAvC,EAA0CH,IAA1C,CAAlC;;AAEA,SAAOX,IAAI,CACRV,KADI,CACE,EADF,EAEJY,GAFI,CAEAD,WAFA,EAGJC,GAHI,CAGAQ,eAHA,EAIJR,GAJI,CAIAG,OAJA,EAKJR,IALI,CAKC,EALD,CAAP;AAMH;AAED,OAAO,SAASkB,OAAT,CAAiBC,OAAjB,EAA0B;AAC/B,QAAMf,WAAW,GAAID,IAAD,IAAUA,IAAI,CAACV,KAAL,CAAW,EAAX,EAAeY,GAAf,CAAoBC,CAAD,IAAOA,CAAC,CAACC,UAAF,CAAa,CAAb,CAA1B,CAA9B;;AACE,QAAMM,eAAe,GAAIC,IAAD,IAAUV,WAAW,CAACH,IAAD,CAAX,CAAkBc,MAAlB,CAAyB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAAvC,EAA0CH,IAA1C,CAAlC;;AACA,SAAOK,OAAO,CACXC,KADI,CACE,SADF,EAEJf,GAFI,CAECgB,GAAD,IAASC,QAAQ,CAACD,GAAD,EAAM,EAAN,CAFjB,EAGJhB,GAHI,CAGAQ,eAHA,EAIJR,GAJI,CAICkB,QAAD,IAAcC,MAAM,CAACC,YAAP,CAAoBF,QAApB,CAJd,EAKJvB,IALI,CAKC,EALD,CAAP;AAMH;;AAED,SAAS0B,YAAT,CAAsB9B,MAAtB,EAA8B;AAC5B,MAAI+B,MAAM,GAAG,EAAb;AACA,MAAIC,UAAU,GACZ,gEADF;AAEA,MAAIC,gBAAgB,GAAGD,UAAU,CAAChC,MAAlC;;AACA,OAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGE,MAApB,EAA4BF,CAAC,EAA7B,EAAiC;AAC/BiC,IAAAA,MAAM,IAAIC,UAAU,CAAC/B,MAAX,CAAkBiC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,gBAA3B,CAAlB,CAAV;AACD;;AACD,SAAOF,MAAP;AACD","sourcesContent":["export function convertString(str) {\n  if(str) {\n    var temp = str.split(\"-\"),\n      i,\n      pretty;\n    for (i = 0; i < temp.length; i++) {\n      temp[i] = temp[i].charAt(0).toUpperCase() + temp[i].slice(1);\n    }\n    pretty = temp.join(\" \");\n    return pretty;\n  }\n \n}\n\n// const salt = 'wertyuiop123456765467890dfghjkjhgcv';\nconst salt = 'lkjhgfdsazxcvbnm0987654321poiuytrew';\n\nexport function encrypt(text) {\n  const textToChars = (text) => text.split(\"\").map((c) => c.charCodeAt(0));\n    const byteHex = (n) => (\"0\" + Number(n).toString(16)).substr(-2);\n    const applySaltToChar = (code) => textToChars(salt).reduce((a, b) => a ^ b, code);\n  \n    return text\n      .split(\"\")\n      .map(textToChars)\n      .map(applySaltToChar)\n      .map(byteHex)\n      .join(\"\");\n}\n\nexport function decrypt(encoded) {\n  const textToChars = (text) => text.split(\"\").map((c) => c.charCodeAt(0));\n    const applySaltToChar = (code) => textToChars(salt).reduce((a, b) => a ^ b, code);\n    return encoded\n      .match(/.{1,2}/g)\n      .map((hex) => parseInt(hex, 16))\n      .map(applySaltToChar)\n      .map((charCode) => String.fromCharCode(charCode))\n      .join(\"\");\n}\n\nfunction randomString(length) {\n  var result = \"\";\n  var characters =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  var charactersLength = characters.length;\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}